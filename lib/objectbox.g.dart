// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/canteen.dart';
import 'data/model/user_settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 901104775374138342),
      name: 'Canteen',
      lastPropertyId: const obx_int.IdUid(5, 5715558816695409887),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4039942095220688568),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3061508305517873887),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4651748061628842574),
            name: 'coordinates',
            type: 29,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5010828180251857654),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5715558816695409887),
            name: 'url',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4487385513029925697),
      name: 'UserSettings',
      lastPropertyId: const obx_int.IdUid(5, 6125088489955694154),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2832552634909393515),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5601032840536963689),
            name: 'canteenOrder',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6889811556800604844),
            name: 'useDarkTheme',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1936853899514021191),
            name: 'highlightVegan',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6125088489955694154),
            name: 'version',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 4487385513029925697),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Canteen: obx_int.EntityDefinition<Canteen>(
        model: _entities[0],
        toOneRelations: (Canteen object) => [],
        toManyRelations: (Canteen object) => {},
        getId: (Canteen object) => object.id,
        setId: (Canteen object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Canteen.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Canteen object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          final coordinatesOffset = fbb.writeListFloat64(object.coordinates);
          final nameOffset = fbb.writeString(object.name);
          final urlOffset = fbb.writeString(object.url);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, addressOffset);
          fbb.addOffset(2, coordinatesOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, urlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final coordinatesParam =
              const fb.ListReader<double>(fb.Float64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Canteen(
              id: idParam,
              address: addressParam,
              coordinates: coordinatesParam,
              name: nameParam,
              url: urlParam);

          return object;
        }),
    UserSettings: obx_int.EntityDefinition<UserSettings>(
        model: _entities[1],
        toOneRelations: (UserSettings object) => [],
        toManyRelations: (UserSettings object) => {},
        getId: (UserSettings object) => object.id,
        setId: (UserSettings object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field UserSettings.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (UserSettings object, fb.Builder fbb) {
          final canteenOrderOffset = fbb.writeListInt64(object.canteenOrder);
          final versionOffset =
              object.version == null ? null : fbb.writeString(object.version!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, canteenOrderOffset);
          fbb.addBool(2, object.useDarkTheme);
          fbb.addBool(3, object.highlightVegan);
          fbb.addOffset(4, versionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final canteenOrderParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 6, []);
          final useDarkThemeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final highlightVeganParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = UserSettings(
              id: idParam,
              canteenOrder: canteenOrderParam,
              useDarkTheme: useDarkThemeParam,
              highlightVegan: highlightVeganParam,
              version: versionParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Canteen] entity fields to define ObjectBox queries.
class Canteen_ {
  /// See [Canteen.id].
  static final id =
      obx.QueryIntegerProperty<Canteen>(_entities[0].properties[0]);

  /// See [Canteen.address].
  static final address =
      obx.QueryStringProperty<Canteen>(_entities[0].properties[1]);

  /// See [Canteen.coordinates].
  static final coordinates =
      obx.QueryDoubleVectorProperty<Canteen>(_entities[0].properties[2]);

  /// See [Canteen.name].
  static final name =
      obx.QueryStringProperty<Canteen>(_entities[0].properties[3]);

  /// See [Canteen.url].
  static final url =
      obx.QueryStringProperty<Canteen>(_entities[0].properties[4]);
}

/// [UserSettings] entity fields to define ObjectBox queries.
class UserSettings_ {
  /// See [UserSettings.id].
  static final id =
      obx.QueryIntegerProperty<UserSettings>(_entities[1].properties[0]);

  /// See [UserSettings.canteenOrder].
  static final canteenOrder =
      obx.QueryIntegerVectorProperty<UserSettings>(_entities[1].properties[1]);

  /// See [UserSettings.useDarkTheme].
  static final useDarkTheme =
      obx.QueryBooleanProperty<UserSettings>(_entities[1].properties[2]);

  /// See [UserSettings.highlightVegan].
  static final highlightVegan =
      obx.QueryBooleanProperty<UserSettings>(_entities[1].properties[3]);

  /// See [UserSettings.version].
  static final version =
      obx.QueryStringProperty<UserSettings>(_entities[1].properties[4]);
}
